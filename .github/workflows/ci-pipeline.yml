name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: NAKozlovskaya
  SERVICES: "authenticationservice userservice orderservice apigateway"
  IMAGE_NAME: NAKozlovskaya/innowise-internship

jobs:
  build-and-test:
    name: Build and Test Services
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: innowise_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        service: [ userservice, authenticationservice, orderservice, apigateway ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Create database schemas
        run: |
          psql postgresql://postgres:postgres@localhost:5432/innowise_db -c "CREATE SCHEMA IF NOT EXISTS auth_schema;"
          psql postgresql://postgres:postgres@localhost:5432/innowise_db -c "CREATE SCHEMA IF NOT EXISTS user_schema;"
          psql postgresql://postgres:postgres@localhost:5432/innowise_db -c "CREATE SCHEMA IF NOT EXISTS order_schema;"

      - name: Build ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          mvn clean compile -DskipTests

      - name: Run tests with JaCoCo for ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          mvn clean test jacoco:report -Djacoco.destDir=target/site/jacoco

      - name: Verify JaCoCo report generation
        run: |
          cd ${{ matrix.service }}
          ls -la target/site/jacoco/ || echo "JaCoCo report not found!"

      - name: Upload test results and coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.service }}
          path: |
            ${{ matrix.service }}/target/surefire-reports/
            ${{ matrix.service }}/target/failsafe-reports/
            ${{ matrix.service }}/target/site/jacoco/
            ${{ matrix.service }}/target/jacoco.exec
          retention-days: 30

  code-analysis:
    name: Code Analysis
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build all services for Sonar
        run: |
          cd userservice && mvn clean compile -DskipTests
          cd ../authenticationservice && mvn clean compile -DskipTests
          cd ../orderservice && mvn clean compile -DskipTests  
          cd ../apigateway && mvn clean compile -DskipTests

      - name: SonarQube Analysis with Coverage
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          cd userservice
          mvn sonar:sonar \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.organization=nataliyakozlovskaya \
            -Dsonar.projectKey=NataliyaKozlovskaya_innowise_internship \
            -Dsonar.projectName='Innowise Project' \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.issue.ignore.multicriteria=e1 \
            -Dsonar.issue.ignore.multicriteria.e1.ruleKey=squid:S00116 \
            -Dsonar.issue.ignore.multicriteria.e1.resourceKey=**/*
  

  docker-build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: code-analysis
    if: github.ref == 'refs/heads/main'

    strategy:
      matrix:
        service: [ userservice, authenticationservice, orderservice, apigateway ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Builds
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image for ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ matrix.service }}:latest
            ${{ env.REGISTRY }}/${{ matrix.service }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}-${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify Docker image for ${{ matrix.service }}
        run: |
          docker pull ${{ env.REGISTRY }}/${{ matrix.service }}:latest
          docker images ${{ env.REGISTRY }}/${{ matrix.service }}

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ matrix.service }}:latest
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Check if SARIF file exists
        id: check_sarif
        run: |
          if [ -f "trivy-results-${{ matrix.service }}.sarif" ]; then
            echo "sarif_exists=true" >> $GITHUB_OUTPUT
          else
            echo "sarif_exists=false" >> $GITHUB_OUTPUT
            echo "SARIF file not found: trivy-results-${{ matrix.service }}.sarif"
            ls -la
          fi

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'