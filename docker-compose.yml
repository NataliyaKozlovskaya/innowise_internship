#version: '3.8'

services:
  # A single PostgreSQL for all services
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: innowise_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-schemas.sql:/docker-entrypoint-initdb.d/init-schemas.sql
    networks:
      - innowise-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (common for services)
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - innowise-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # User Service
  user-service:
    build:
      context: ./userservice
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      SERVER_PORT: 8088
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/innowise_db?currentSchema=user_schema
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
#    ports:
#      - "8090:8088"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - innowise-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8088/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Authentication Service
  auth-service:
    build:
      context: ./authenticationservice
      dockerfile: Dockerfile
    container_name: auth-service
    environment:
      SERVER_PORT: 8089
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/innowise_db?currentSchema=auth_schema
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      USER_SERVICE_URL: http://user-service:8088
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - innowise-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8089/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

 # Order Service
  order-service:
    build:
      context: ./orderservice
      dockerfile: Dockerfile
    container_name: order-service
    environment:
      SERVER_PORT: 8099
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/innowise_db?currentSchema=order_schema
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      USER_SERVICE_URL: http://user-service:8088
    depends_on:
      postgres:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - innowise-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8099/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./apigateway
      dockerfile: Dockerfile
    container_name: api-gateway
    environment:
      SERVER_PORT: 8077
      SPRING_PROFILES_ACTIVE: docker
      JWT_SECRET: ${JWT_SECRET}
      # Routing services
      AUTH_SERVICE_URL: http://auth-service:8089
      USER_SERVICE_URL: http://user-service:8088
      ORDER_SERVICE_URL: http://order-service:8099
    ports:
      - "8093:8077"
    depends_on:
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
    networks:
      - innowise-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3



volumes:
  postgres_data:
  redis_data:

networks:
  innowise-network:
    driver: bridge